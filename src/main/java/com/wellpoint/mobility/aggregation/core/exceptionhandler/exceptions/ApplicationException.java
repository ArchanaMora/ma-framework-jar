/*
 * Copyright (c) 2014 www.wellpoint.com.  All rights reserved.
 *
 * This program contains proprietary and confidential information and trade
 * secrets of Wellpoint. This program may not be duplicated, disclosed or
 * provided to any third parties without the prior written consent of
 * Wellpoint. Disassembling or decompiling of the software and/or reverse
 * engineering of the object code are prohibited.
 */
package com.wellpoint.mobility.aggregation.core.exceptionhandler.exceptions;

import com.wellpoint.mobility.aggregation.core.exceptionhandler.pojo.ErrorCode;

/**
 * This is the base class for all exceptions generated by the application. Error code is the fully qualified error code
 * that will be looked up in the database. You can also pass an ErrorCode object<br/>
 * <br/>
 * Usage
 * 
 * <pre>
 * if (requestHeader == null)
 * {
 * 	logger.error(&quot;BaseComposite.validateApplicationHeader() - EXIT =&gt; request header is required&quot;);
 * 	throw new ApplicationException(&quot;com.wellpoint.mobility.aggregation.core.composite.BaseComposite.validateApplicationHeader.requestHeaderRequired&quot;);
 * }
 * </pre>
 * <br/>
 * Alternatively, a different construct (eliminates typing all the package name, just construct an ErrorCode passing the
 * class object)
 * <br/>
 * <pre>
 * if (requestHeader == null)
 * {
 * 	logger.error("BaseComposite.validateApplicationHeader() - EXIT => request header is required");
 * 	throw new ApplicationException(new ErrorCode(BaseComposite.class, "validateApplicationHeader", "requestHeaderRequired");
 * }
 * </pre>
 * <br/>
 * If you are doing multiple validations, you can construct the error code once passing on the class and the method
 * name, and set the errorcode just before passing it to the ApplicationException
 * <br/>
 * <pre>
 * ErrorCode errorCode = new ErrorCode(BaseComposite.class, &quot;validateApplicationHeader&quot;);
 * if (requestHeader == null)
 * {
 * 	logger.error(&quot;BaseComposite.validateApplicationHeader() - EXIT =&gt; request header is required&quot;);
 * 	errorCode.setErrorCode(&quot;requestHeaderRequired&quot;);
 * 	throw new ApplicationException(errorCode);
 * }
 * String appId = requestHeader.getAppId();
 * if (appId == null)
 * {
 * 	logger.error(&quot;BaseComposite.validateApplicationHeader() - EXIT =&gt; application id is required&quot;);
 * 	errorCode.setErrorCode(&quot;appIdRequired&quot;);
 * 	throw new ApplicationException(errorCode);
 * }
 * </pre>
 * 
 * @author edward.biton@wellpoint.com
 */
public class ApplicationException extends Exception
{
	/**
	 * serialVersionUID
	 */
	private static final long serialVersionUID = -3516826704478204046L;
	/**
	 * errorCode
	 */
	private String errorCode = "";

	/**
	 * Instantiates a new ApplicationException given a full error code string
	 * 
	 * @param errorCode
	 *            is the fully qualified error code that includes the package name, class name, method name and the
	 *            errorcode
	 */
	public ApplicationException(final String errorCode)
	{
		super(errorCode);
		this.errorCode = errorCode;
	}

	/**
	 * Instantiates a new ApplicationException using an ErrorCode object
	 * 
	 * @param errorCodeDTO
	 *            the error code object
	 */
	public ApplicationException(final ErrorCode errorCodeDTO)
	{
		super(errorCodeDTO.getFullErrorCode());
		this.errorCode = errorCodeDTO.getFullErrorCode();
	}

	/**
	 * Instantiates a new ApplicationException given a package name, class name, method name and error code
	 * 
	 * @param packageName
	 *            package name of the class where the error is detected
	 * @param className
	 *            name of the class where the error is detected
	 * @param methodName
	 *            name of the method where the error is detected
	 * @param errorCode
	 *            error code
	 */
	public ApplicationException(final String packageName, final String className, final String methodName, final String errorCode)
	{
		super(packageName + "." + className + "." + methodName + "." + errorCode);
		this.errorCode = errorCode;
	}

	/**
	 * Instantiates a new ApplicationException given a full error code and a Throwable object.
	 * 
	 * @param errorCode
	 *            is the fully qualified error code that includes the package name, class name, method name and the
	 *            errorcode
	 * @param cause
	 *            the cause
	 */
	public ApplicationException(final String errorCode, final Throwable cause)
	{
		super(errorCode, cause);
		this.errorCode = errorCode;
	}

	/**
	 * Instantiates a new ApplicationException using an ErrorCode object and a Throwable object
	 * 
	 * @param errorCodeDTO
	 *            error code object
	 * @param cause
	 *            the cause
	 */
	public ApplicationException(final ErrorCode errorCodeDTO, final Throwable cause)
	{
		super(errorCodeDTO.getFullErrorCode(), cause);
		this.errorCode = errorCodeDTO.getFullErrorCode();
	}

	/**
	 * Instantiates a new ApplicationException for wrapping exceptions. Do not use unless necessary. Only framework
	 * level classes should use this constructor for extending or handling additional types of exceptions. Business
	 * level logic should not use this constructor
	 * 
	 * @param cause
	 *            the cause
	 */
	public ApplicationException(final Throwable cause)
	{
		super(cause);
	}

	/**
	 * @return the errorCode
	 */
	public String getErrorCode()
	{
		return errorCode;
	}

	/**
	 * @param errorCode
	 *            the errorCode to set
	 */
	public void setErrorCode(String errorCode)
	{
		this.errorCode = errorCode;
	}

	@Override
	public String toString()
	{
		return super.toString() + ". ApplicationException [errorCode=" + errorCode + "]";
	}

}
